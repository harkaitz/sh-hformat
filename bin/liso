#!/bin/sh -e
##:
#h: Usage: liso [-m] ISO DRIVE
#h:
#h: This program first formats the DRIVE to FAT32 and then
#h: extracts a GNU/Linux installation iso image to it. This
#h: method will only work with EFI boot.
#h:
#h: With `-m` you will create partitions manually.
##:
#D: base64, GNUdd
##:
liso() {
    local OPTIND optopt opt_m=''
    ## Parse command line arguments.
    while getopts "m" optopt; do # OPTARG
        case $optopt in
            m)  opt_m="y";;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    ## Arguments.
    if test ! -n "${1}";then
        liso_error "Please specify an iso file."
        return 1
    elif test ! -n "${2}";then
        liso_error "Please specify a drive."
        return 1
    elif test ! -b "${2}";then
        liso_error "${2} is not a block special."
        return 1
    elif test @"${1}" = @"@base64";then
        sudo head -c 512 "${2}" | base64 -w 50
        return 0
    elif test ! -f "${1}";then
        liso_error "${1} does not exist."
        return 1
    elif test ! @"`whoami`" = @"root";then
        liso_error "You must be root to do this."
        return 1
    elif ! which base64 /sbin/mkfs.fat mount 7z >/dev/null 2>&1;then
        liso_error "Please ensure the following commands are available:"
        liso_error "base64, mkfs.fat, mount, 7z."
        return 1
    fi
    local iso="$1" drive="$2" mnt="/mnt/liso"
    ## Burn MBR.
    if test -n "${opt_m}"; then
        dd if=/dev/zero of="${drive}" count=1 bs=1M
        /sbin/cfdisk "${drive}"
    else
        liso_info "Burning MBR to ${drive} ..."
        base64 -d > "${drive}" <<-EOF
	RVIIAAAAkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAz7fqO1b
	wAfPv8ZjHbZjHJZlNmUQZXjt2OxVK+AHy/AAa5AAHzpepLBgAA
	UrRBu6pVMckw9vnNE3IWgftVqnUQg+EBdAtmxwbzBrRC6xXrAj
	HJWlG0CM0TWw+2xkBQg+E/UffhU1JQuwB8uQQAZqGwB+hEAA+C
	gABmQIDHAuLyZoE+QHz7wHhwdQn6vOx76kR8AADogwBpc29saW
	51eC5iaW4gbWlzc2luZyBvciBjb3JydXB0Lg0KZmBmMdJmAwb4
	e2YTFvx7ZlJmUAZTagFqEInmZvc26HvA5AaI4YjFkvY27nuIxg
	jhQbgBAooW8nvNE41kEGZhw+geAE9wZXJhdGluZyBzeXN0ZW0g
	bG9hZCBlcnJvci4NCl6stA6KPmIEswfNEDwKdfHNGPTr/QAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAA9I0FAAAAAABwhfRWAACAIQMA
	78TK+wAIAABAaeoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVao=
	EOF
    fi
    liso_info "Creating a FAT32 partition ..."
    if test -b "${drive}p1"; then
        /sbin/mkfs.fat -F 32 -n LINUX "${drive}p1" >/dev/null
    else
        /sbin/mkfs.fat -F 32 -n LINUX "${drive}1" >/dev/null
    fi
    liso_info "Mounting to ${mnt} ..."
    mkdir -p "${mnt}"
    if test -b "${drive}p1"; then
        mount "${drive}p1" "${mnt}"
    else
        mount "${drive}1" "${mnt}"
    fi
    liso_info "Extracting to ${mnt} ..."
    if ! 7z x -o"${mnt}" "${iso}" >/dev/null;then
        liso_error "Extraction failed, unmounting ${mnt} ..."
        umount "${mnt}"
        return 1
    fi
    liso_info "Unmounting ${mnt} ..."
    umount "${mnt}"
    liso_info "Syncing ..."
    sync
}
## -------------------------------------------------------------------
liso_info()  { echo "$*";            }
liso_error() { echo "error: $*" >&2; }
if test @"$(basename "$0")" = @"liso"; then
    case "${1}" in
        ''|-h|--help) sed -n 's/^ *#h: \{0,1\}//p' "$0" ;;
        *)            liso "$@"; exit 0;;
    esac
fi
