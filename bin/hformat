#!/bin/sh -e
##:
#h: Usage: hformat [DEVICES...]
#h:
#h: -l            : List removable storage devices.
#h: -f zero       : Zero the device.
#h: -f udf|ext3   : Format using UDF.
#h: -f f2fs       : Format using F2FS file system. (Requires mkfs.f2fs from f2fs-tools)
#h: -f ntfs|fat32 : Format using NTFS. (Remember to put type 7 with cfdisk)
#h: -n NAME       : Name for the partition.
#h: -F            : Run fast formatting. (No zeroing and bad block checks)
##:
hformat() {
    local OPTIND=1 optopt f formats="" name=
    
    ## Parse command line arguments.
    while getopts "lf:n:F" optopt; do
        case $optopt in
            l)  hformat_list_drives      ;;
            F)  HFORMAT_FAST=1           ;;
            n)  name="${OPTARG}"   ;;
            f)  formats="${formats} ${OPTARG}";;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    
    ## Format devices.
    for device in "$@"; do
        if test ! -e "${device}"; then
            echo >&2 "error: File '${device}' does not exist."
            return 1
        fi
        for f in ${formats};do
            hformat_format_"${f}" "${device}" "${name:-$(hformat_rname)}"
        done
    done
}
## -------------------------------------------------------------------
hformat_list_drives() {
    ls -lh /dev/disk/by-id/ | sed 's|../../|/dev/|g' | sed '\|/dev/nvme|d'
}
hformat_format_zero() { # DRIVE
    local device="${1}"
    hformat_require_device "${device}"
    hformat_vrun dd if="/dev/zero" of="${device}" bs=1M
    hformat_vrun sync
}
hformat_format_udf() { # DRIVE [NAME]
    local device="${1}" name="${2:-$(hformat_rname)}"
    hformat_require_device "${device}"
    hformat_require_entire_disk "${device}"
    hformat_vrun dd if="/dev/zero" of='${device}' bs=1M count=1
    hformat_vrun mkudffs --utf8                               \
                 --media-type=hd --blocksize=512                   \
                 --lvid="${name}" --vid="${name}" --fsid="${name}" \
                 --udfrev=0x0102 "${device}"
    hformat_vrun sync
}
hformat_format_ext3() { # DRIVE [NAME]
    local device="${1}" name="${2:-$(hformat_rname)}"
    hformat_require_device "${device}"
    hformat_vrun mke2fs -t "ext3" -L "${name}" -M "/mnt/${name}" "${device}"
    hformat_vrun sync
}
hformat_format_ntfs() { # DRIVE [NAME]
    local device="${1}" name="${2:-$(hformat_rname)}"
    hformat_require_device "${device}"
    hformat_vrun mkntfs -f -L "${name}" "${device}"
    hformat_vrun sync
}
hformat_format_fat32() { # DRIVE [NAME]
    local device="${1}" name="${2:-$(hformat_rname)}"
    hformat_require_device "${device}"
    name="$(echo "${name}" | tr '[:lower:]' '[:upper:]')"
    hformat_vrun mkfs.fat -F 32 -n "${name}" "${device}"
    hformat_vrun sync
}
hformat_format_f2fs() { # DRIVE [NAME]
    local device="${1}" name="${2:-$(hformat_rname)}"
    hformat_require_device "${device}"
    name="$(echo "${name}" | tr '[:lower:]' '[:upper:]')"
    hformat_vrun mkfs.f2fs -f -l "${name}" "${device}"
    hformat_vrun sync
}
## -------------------------------------------------------------------
hformat_vrun() {
    echo >&2 "$*"
    "$@"
}
hformat_rname() {
    if which md5 >/dev/null 2>&1; then
        head -c 10 /dev/urandom | md5    | head -c 8
    elif which md5sum >/dev/null 2>&1; then
        head -c 10 /dev/urandom | md5sum | head -c 8
    else
        echo "error: MD5SUM not supported." >&2
        return 1
    fi
}
hformat_require_device() {
    if test ! -e "${1}"; then
        echo >&2 "error: ${1}: The file does not exist."
        return 1
    fi
    if test ! -w "${1}"; then
        echo >&2 "error: ${1}: No permissions to write."
        return 1
    fi
}
hformat_require_entire_disk() {
    if test ! -n "$(echo "$1" | grep -e '/dev/sd[abcd]$' -e '/dev/.*[0-9]$')"; then
        echo >&2 "error: You can only format with UDF entire disks."
        return 1
    fi
}
## -------------------------------------------------------------------
HFORMAT_FAST=
if test @"${SCRNAME:-$(basename "$0")}" = @"hformat"; then
    case "${1}" in
        ''|-h|--help) sed -n 's/^ *#h: \{0,1\}//p' "$0";;
        *)            hformat "$@"; exit 0;;
    esac
fi





